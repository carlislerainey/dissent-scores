{
  "hash": "b94e6fd3b6c36da49cce91dd08565511",
  "result": {
    "markdown": "---\ntitle: \"Compute Dissent Scores\"\nfreeze: true\n---\n\n\nWe begin by setting up the data for Stan.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load packages\nlibrary(tidyverse)\nlibrary(cmdstanr)\nlibrary(countrycode)\nlibrary(tidybayes)\n\n# load events data \ncounts <- read.csv(\"output/idea-counts.csv\") %>%\n  arrange(ccode, year) %>%\n  mutate(observation_index = 1:n()) %>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,775\nColumns: 6\n$ year              <int> 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998…\n$ ccode             <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20, 20,…\n$ idea_code         <chr> \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"USA\", \"US…\n$ n_dissent_events  <int> 118, 109, 124, 138, 127, 117, 123, 130, 147, 121, 14…\n$ n_events          <int> 135537, 140735, 151180, 177717, 194368, 195981, 2056…\n$ observation_index <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1…\n```\n:::\n\n```{.r .cell-code}\n# create data set with lengths of time-series for each country\ns <- counts %>%\n  group_by(ccode) %>%\n  summarize(size = n()) \n\n# setup data for stan\nN <- nrow(counts)\nJ <- nrow(s)\ns <- s$size\nstan_data <- list(N = N,\n                  J = J, \n                  s = s,\n                  n_dissent_events = counts$n_dissent_events, \n                  n_events = counts$n_events)\n```\n:::\n\n\nNext, we fit the model in Stan.\n\n``` stan\ndata {\n  int<lower=1> N; // number of observations\n  int<lower=1> J; // number of groups\n  array[J] int s; // number of time periods for each group; trick for ragged arrays\n  array[N] int<lower=0> n_dissent_events; // number of dissent events\n  array[N] int<lower=0> n_events; // total number of events\n}\n\nparameters {\n  real Mu;\n  real<lower=0> sigma_mu;\n  real<lower=0> sigma_alpha;\n  real<lower=1> nu_mu;\n  real<lower=1> nu_alpha;\n  array[N] real alpha; // innovations on logit scale\n  array[J] real mu;    // group-level mean intensity on logit scale\n}\n\ntransformed parameters {\n  array[N] real eta;\n  {  // bracket is a trick to \"hide\" this unallowed integer from the block\n  // below, I use a trick for ragged arrays\n  int pos;\n  pos = 1;\n  for (j in 1:J) {\n    for (t in 1:s[j]) {\n      eta[(pos - 1) + t] = mu[j] + alpha[(pos - 1) + t]; \n    }\n    pos = pos + s[j];\n  }\n  }\n}\n\nmodel {\n  sigma_mu ~ cauchy(0, 3);\n  sigma_alpha ~ cauchy(0, 3);\n  nu_mu ~ gamma(2, 0.1);\n  nu_alpha ~ gamma(2, 0.1);\n  mu ~ student_t(nu_mu, Mu, sigma_mu);\n  alpha ~ student_t(nu_alpha, 0, sigma_alpha);\n  n_dissent_events ~ binomial_logit(n_events, eta);\n}\n\ngenerated quantities {\n  vector[N] log_lik;\n  for (i in 1:N) {\n    log_lik[i] = binomial_logit_lpmf(n_dissent_events[i] | n_events[i], eta[i]);\n  }\n}\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fit model\nmod <- cmdstan_model(\"src/dissent.stan\")\nfit <- mod$sample(\n  data = stan_data, \n  seed = 97854, \n  iter_sampling = 15000,\n  iter_warmup = 5000,\n  chains = 10, \n  parallel_chains = 10,\n  refresh = 100 # print update every 500 iters\n)\n```\n:::\n\n\nFinally, we do the post-processing of the simulations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract posterior simulations\nset.seed(4238)\ndraws <- fit$draws(variables = \"eta\") %>%\n  posterior::as_draws_df() %>% \n  sample_n(5000) \n\n# test that seed worked properly\nas.numeric(draws[1, 1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -7.0471\n```\n:::\n\n```{.r .cell-code}\nas.numeric(draws[1, 1]) == -7.0471\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n\n```{.r .cell-code}\n# compute dissent scores\ndissent_scores <- draws %>% \n  # pivot data set into long format with columns for the eta index\n  pivot_longer(cols = starts_with(\"eta[\"), names_to = \"par\", values_to = \"eta\") %>% \n  # extract observation index (i.e., country-year) from par\n  mutate(observation_index = str_remove_all(par, \"[^[:digit:]]\"),\n         observation_index = as.numeric(observation_index)) %>% \n  # compute posterior averages and se\n  group_by(observation_index) %>%\n  summarize(avg_eta = mean(eta), \n            se_eta = sd(eta),\n            avg_pi = mean(plogis(eta))) %>%\n  ungroup() %>%\n  # rescale posterior average of eta to create dissent score\n  mutate(dissent_score = (avg_eta - mean(avg_eta))/(2*sd(avg_eta)),\n         se_dissent_score = se_eta/(2*sd(avg_eta))) %>%\n  # join in raw counts data\n  left_join(counts) %>% \n  mutate(frac_dissent_events = ifelse(n_events == 0, 0, n_dissent_events/n_events)) %>%\n  # add in additional country names\n  #   - country_name: country.name from {countrycode}\n  #   - stateabb: COW 3-digit alpha from {countrycode} \n  mutate(stateabb = countrycode(ccode, \"cown\", \"cowc\"),\n         country_name = countrycode(ccode, \"cown\", \"country.name.en\")) %>%\n  # make repairs for german case\n  mutate(stateabb = ifelse(ccode == 260, \"GFR\", stateabb),\n         country_name = ifelse(ccode == 260, \"Germany (GFR)\", country_name)) %>%\n  # add version info\n  # add version info\n  mutate(release = \"V0.1 (Preprint)\", \n         release_date = \"2023-12-18\", \n         created_date = Sys.Date(), \n         data_source = \"IDEA\") %>%\n  # select variables for final data set\n  select(release, release_date, data_source, created_date, country_name, ccode, stateabb, year, n_events, n_dissent_events, frac_dissent_events, avg_pi, avg_eta, dissent_score, se_dissent_score)\n\n# write latent measures to file\nwrite_csv(dissent_scores, \"output/dissent-scores.csv\")\nhaven::write_dta(dissent_scores, \"output/dissent-scores.dta\")\nwrite_rds(dissent_scores, \"output/dissent-scores.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# verify that just-created version matches old version\nnew <- read_csv(\"output/dissent-scores.csv\")\ndv <- read_csv(\"https://raw.githubusercontent.com/carlislerainey/dissent-scores/main/output/dissent-scores.csv\")\n\nall.equal(new, dv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Names: 11 string mismatches\"                                                                                                \n [2] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Names: 11 string mismatches >\"                                        \n [3] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Length mismatch: comparison on first 13 components >\"                 \n [4] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Component 4: names for target but not for current >\"                  \n [5] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Component 4: Attributes: < Component \\\"class\\\": 1 string mismatch > >\"\n [6] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Component 4: Length mismatch: comparison on first 0 components >\"     \n [7] \"Attributes: < Component \\\"spec\\\": Component \\\"cols\\\": Component 7: Attributes: < Component \\\"class\\\": 1 string mismatch > >\"\n [8] \"Length mismatch: comparison on first 13 components\"                                                                         \n [9] \"Component \\\"release\\\": 2775 string mismatches\"                                                                              \n[10] \"Component \\\"release_date\\\": Mean relative difference: 0.004870871\"                                                          \n[11] \"Component 3: 2775 string mismatches\"                                                                                        \n[12] \"Component 4: Attributes: < Modes: list, NULL >\"                                                                             \n[13] \"Component 4: Attributes: < Lengths: 1, 0 >\"                                                                                 \n[14] \"Component 4: Attributes: < names for target but not for current >\"                                                          \n[15] \"Component 4: Attributes: < current is not list-like >\"                                                                      \n[16] \"Component 4: target is Date, current is numeric\"                                                                            \n[17] \"Component 5: 2775 string mismatches\"                                                                                        \n[18] \"Component 6: Mean relative difference: 3.356531\"                                                                            \n[19] \"Component 7: Modes: character, numeric\"                                                                                     \n[20] \"Component 7: target is character, current is numeric\"                                                                       \n[21] \"Component 8: Mean relative difference: 0.9950816\"                                                                           \n[22] \"Component 9: Mean relative difference: 0.999998\"                                                                            \n[23] \"Component 10: Mean relative difference: 0.9995781\"                                                                          \n[24] \"Component 11: Mean relative difference: 826.2721\"                                                                           \n[25] \"Component 12: Mean relative difference: 56.56884\"                                                                           \n[26] \"Component 13: Mean relative difference: 1.041171\"                                                                           \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}