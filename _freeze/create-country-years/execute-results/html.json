{
  "hash": "d8ad615f04addb945b474f63529d23dd",
  "result": {
    "markdown": "---\ntitle: \"Create the Country-Year Observations\"\nfreeze: true\n---\n\n\nThe IDEA events data range from 1990 to 2004. Within that time frame, we use the [Correlates of War State Membershi](https://correlatesofwar.org/wp-content/uploads/system2016.csv) data set to define the country-years in the data set. There is good correspondence between the IDEA data and COW definitions.\n\nTo create the country-years in the final data set, we proceed in several steps:\n\n1.  First, use {countrycode} to bluntly assign COW codes assuming that the IDEA alpha code corresponds to the COW alpha code. This is correct in about 85% of cases.\n2.  Second, use the COW `statenme` variable and {countrycode}'s `country.name` variable to triple check the match.\n3.  Third, resolve any mismatches between the country names. (There is one inconsequential mismatch.)\n4.  Fourth, resolve the ambiguous matches from {countrycode}, of which there are a few. Almost all of these are straightforward.\n5.  Fifth, check that all (or most) IDEA codes have a corresponding COW code. (All but two do.)\n\n## The IDEA Codes\n\nThe IDEA country codes are available [here](https://doi.org/10.7910/DVN/BTMQA0/WWBEWS). The code below loads the IDEA codes as a tribble.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(tidyverse)\nlibrary(countrycode)\n\n# original file at https://doi.org/10.7910/DVN/BTMQA0/WWBEWS\nidea_codes <- tibble::tribble(\n                        ~idea_country_name,     ~idea_code,\n                       \"Afghanistan\",     \"AFG\",\n                           \"Albania\",     \"ALB\",\n                           \"Algeria\",     \"ALG\",\n                           \"Andorra\",     \"AND\",\n                            \"Angola\",     \"ANG\",\n               \"Antigua and Barbuda\",     \"ANT\",\n                         \"Argentina\",     \"ARG\",\n                           \"Armenia\",     \"ARM\",\n                         \"Australia\",     \"AUL\",\n                           \"Austria\",     \"AUS\",\n                        \"Azerbaijan\",     \"AZE\",\n                           \"Bahrain\",     \"BAH\",\n                          \"Barbados\",     \"BAR\",\n                           \"Belgium\",     \"BEL\",\n                             \"Benin\",     \"BEN\",\n                      \"Burkina Faso\",     \"BFO\",\n                           \"Bahamas\",     \"BHM\",\n                            \"Bhutan\",     \"BHU\",\n                           \"Belarus\",     \"BLR\",\n                            \"Belize\",     \"BLZ\",\n                        \"Bangladesh\",     \"BNG\",\n                           \"Bolivia\",     \"BOL\",\n            \"Bosnia and Herzegovina\",     \"BOS\",\n                          \"Botswana\",     \"BOT\",\n                            \"Brazil\",     \"BRA\",\n                            \"Brunei\",     \"BRU\",\n                           \"Burundi\",     \"BUI\",\n                          \"Bulgaria\",     \"BUL\",\n                          \"Cambodia\",     \"CAM\",\n                            \"Canada\",     \"CAN\",\n                          \"Cameroon\",     \"CAO\",\n                        \"Cape Verde\",     \"CAP\",\n          \"Central African Republic\",     \"CEN\",\n                              \"Chad\",     \"CHA\",\n                             \"Chile\",     \"CHL\",\n                             \"China\",     \"CHN\",\n                          \"Colombia\",     \"COL\",\n                           \"Comoros\",     \"COM\",\n             \"Republic of the Congo\",     \"CON\",\n                      \"Cook Islands\",     \"COO\",\n                        \"Costa Rica\",     \"COS\",\n                           \"Croatia\",     \"CRO\",\n                              \"Cuba\",     \"CUB\",\n                            \"Cyprus\",     \"CYP\",\n                    \"Turkish Cyprus\",     \"CYT\",\n             \"Former Czechoslovakia\",     \"CZE\",\n                    \"Czech Republic\",     \"CZR\",\n                           \"Denmark\",     \"DEN\",\n                          \"Djibouti\",     \"DJI\",\n                          \"Dominica\",     \"DMI\",\n                \"Dominican Republic\",     \"DOM\",\n                           \"Vietnam\",     \"DRV\",\n                           \"Ecuador\",     \"ECU\",\n                             \"Egypt\",     \"EGY\",\n                 \"Equatorial Guinea\",     \"EQG\",\n                           \"Eritrea\",     \"ERI\",\n                           \"Estonia\",     \"EST\",\n                          \"Ethiopia\",     \"ETH\",\n                           \"Finland\",     \"FIN\",\n                              \"Fiji\",     \"FJI\",\n                        \"Micronesia\",     \"FMS\",\n                           \"Germany\",     \"FRG\",\n                            \"France\",     \"FRN\",\n                             \"Gabon\",     \"GAB\",\n                            \"Gambia\",     \"GAM\",\n             \"East and West Germany\", \"GDR/FRG\",\n                             \"Ghana\",     \"GHA\",\n                     \"Guinea Bissau\",     \"GNB\",\n                            \"Greece\",     \"GRC\",\n                           \"Georgia\",     \"GRG\",\n                           \"Grenada\",     \"GRN\",\n                         \"Guatemala\",     \"GUA\",\n                            \"Guinea\",     \"GUI\",\n                            \"Guyana\",     \"GUY\",\n                             \"Haiti\",     \"HAI\",\n                          \"Honduras\",     \"HON\",\n                           \"Hungary\",     \"HUN\",\n                           \"Iceland\",     \"ICE\",\n                             \"India\",     \"IND\",\n                         \"Indonesia\",     \"INS\",\n                           \"Ireland\",     \"IRE\",\n                              \"Iran\",     \"IRN\",\n                              \"Iraq\",     \"IRQ\",\n                            \"Israel\",     \"ISR\",\n                             \"Italy\",     \"ITA\",\n                     \"Cote d Ivoire\",     \"IVO\",\n                           \"Jamaica\",     \"JAM\",\n                            \"Jordan\",     \"JOR\",\n                             \"Japan\",     \"JPN\",\n                             \"Kenya\",     \"KEN\",\n                          \"Kiribati\",     \"KIR\",\n                            \"Kuwait\",     \"KUW\",\n                        \"Kyrgyzstan\",     \"KYR\",\n                        \"Kazakhstan\",     \"KZK\",\n                              \"Laos\",     \"LAO\",\n                            \"Latvia\",     \"LAT\",\n                           \"Liberia\",     \"LBR\",\n                           \"Lebanon\",     \"LEB\",\n                           \"Lesotho\",     \"LES\",\n                             \"Libya\",     \"LIB\",\n                     \"Liechtenstein\",     \"LIE\",\n                         \"Lithuania\",     \"LIT\",\n                        \"Luxembourg\",     \"LUX\",\n                        \"Mauritania\",     \"MAA\",\n                         \"Macedonia\",     \"MAC\",\n                          \"Maldives\",     \"MAD\",\n                        \"Madagascar\",     \"MAG\",\n                          \"Malaysia\",     \"MAL\",\n                         \"Mauritius\",     \"MAS\",\n                            \"Malawi\",     \"MAW\",\n                            \"Monaco\",     \"MCO\",\n                            \"Mexico\",     \"MEX\",\n                           \"Moldova\",     \"MLD\",\n                              \"Mali\",     \"MLI\",\n                             \"Malta\",     \"MLT\",\n                          \"Mongolia\",     \"MON\",\n                           \"Morocco\",     \"MOR\",\n                             \"Burma\",     \"MYA\",\n                        \"Mozambique\",     \"MZM\",\n                           \"Namibia\",     \"NAM\",\n                             \"Nauru\",     \"NAU\",\n                             \"Nepal\",     \"NEP\",\n                       \"New Zealand\",     \"NEW\",\n                         \"Nicaragua\",     \"NIC\",\n                           \"Nigeria\",     \"NIG\",\n                             \"Niger\",     \"NIR\",\n                              \"Niue\",     \"NIU\",\n                            \"Norway\",     \"NOR\",\n                       \"Netherlands\",     \"NTH\",\n                              \"Oman\",     \"OMA\",\n                   \"Paracel Islands\",     \"PAC\",\n                          \"Pakistan\",     \"PAK\",\n                         \"Palestine\",     \"PAL\",\n                            \"Panama\",     \"PAN\",\n                          \"Paraguay\",     \"PAR\",\n                             \"Palau\",     \"PAU\",\n                              \"Peru\",     \"PER\",\n                       \"Philippines\",     \"PHI\",\n                  \"Papua New Guinea\",     \"PNG\",\n                            \"Poland\",     \"POL\",\n                          \"Portugal\",     \"POR\",\n                       \"North Korea\",     \"PRK\",\n             \"North and South Korea\", \"PRK/ROK\",\n                       \"Puerto Rico\",     \"PTR\",\n                             \"Qatar\",     \"QAT\",\n                       \"South Korea\",     \"ROK\",\n                           \"Romania\",     \"RUM\",\n                            \"Russia\",     \"RUS\",\n                            \"Rwanda\",     \"RWA\",\n                      \"South Africa\",     \"SAF\",\n                       \"El Salvador\",     \"SAL\",\n             \"Sao Tome and Principe\",     \"SAO\",\n                      \"Saudi Arabia\",     \"SAU\",\n                           \"Senegal\",     \"SEN\",\n             \"Serbia and Montenegro\",     \"SER\",\n                        \"Seychelles\",     \"SEY\",\n                      \"Sierra Leone\",     \"SIE\",\n                         \"Singapore\",     \"SIN\",\n                          \"Slovakia\",     \"SLO\",\n                          \"Slovenia\",     \"SLV\",\n                        \"San Marino\",     \"SMO\",\n                   \"Solomon Islands\",     \"SOL\",\n                           \"Somalia\",     \"SOM\",\n                   \"Spratly Islands\",     \"SPL\",\n                             \"Spain\",     \"SPN\",\n                         \"Sri Lanka\",     \"SRI\",\n             \"Saint Kitts and Nevis\",     \"STK\",\n                       \"Saint Lucia\",     \"STL\",\n  \"Saint Vincent and the Grenadines\",     \"STV\",\n                             \"Sudan\",     \"SUD\",\n                          \"Suriname\",     \"SUR\",\n                         \"Swaziland\",     \"SWA\",\n                            \"Sweden\",     \"SWD\",\n                       \"Switzerland\",     \"SWZ\",\n                             \"Syria\",     \"SYR\",\n                        \"Tajikistan\",     \"TAJ\",\n                            \"Taiwan\",     \"TAW\",\n                          \"Tanzania\",     \"TAZ\",\n                          \"Thailand\",     \"THI\",\n                      \"Turkmenistan\",     \"TKM\",\n                              \"Togo\",     \"TOG\",\n                             \"Tonga\",     \"TON\",\n               \"Trinidad and Tobago\",     \"TRI\",\n                           \"Tunisia\",     \"TUN\",\n                            \"Turkey\",     \"TUR\",\n                            \"Tuvalu\",     \"TUV\",\n              \"United Arab Emirates\",     \"UAE\",\n                            \"Uganda\",     \"UGA\",\n                    \"United Kingdom\",     \"UK_\",\n                           \"Ukraine\",     \"UKR\",\n                           \"Uruguay\",     \"URU\",\n                     \"United States\",     \"USA\",\n                        \"Uzbekistan\",     \"UZB\",\n                           \"Vanuatu\",     \"VAN\",\n                           \"Vatican\",     \"VAT\",\n                         \"Venezuela\",     \"VEN\",\n                    \"Western Sahara\",     \"WSA\",\n                             \"Samoa\",     \"WSM\",\n             \"North and South Yemen\", \"YAR/YPR\",\n                             \"Yemen\",     \"YEM\",\n                 \"Former Yugoslavia\",     \"YUG\",\n  \"Democratic Republic of the Congo\",     \"ZAI\",\n                            \"Zambia\",     \"ZAM\",\n                          \"Zimbabwe\",     \"ZIM\"\n  )\n```\n:::\n\n\n## Match IDEA Codes to COW Codes\n\nThe IDEA codes *mostly* match alpha COW codes.[^1] The code below uses the {countrycode} package to add numeric COW codes, {countrycode}'s own `country.name` variable, and the COW `statenme` variable.\n\n[^1]: This is the returns the highest percent matched using `countrycode::guess_field()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_joined <- idea_codes |>\n  mutate(ccode = countrycode(sourcevar = idea_code,\n                           origin = \"cowc\", \n                           destination = \"cown\"), \n         cc_country_name = countrycode(sourcevar = idea_code,\n                           origin = \"cowc\", \n                           destination = \"country.name\")) |>\n  left_join(distinct(read_csv(\"data/states2016.csv\") |> \n              select(ccode, cow_country_name = statenme))) |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: There were 2 warnings in `mutate()`.\nThe first warning was:\nℹ In argument: `ccode = countrycode(sourcevar = idea_code, origin = \"cowc\",\n  destination = \"cown\")`.\nCaused by warning:\n! Some values were not matched unambiguously: ANT, COO, CYT, DMI, FJI, FMS, FRG, GDR/FRG, IVO, MCO, NIU, PAC, PAU, PRK/ROK, PTR, RUM, SAO, SER, SMO, SPL, STK, STL, STV, UK_, VAT, WSA, YAR/YPR, ZAI\nℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning.\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 243 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): stateabb, statenme\ndbl (8): ccode, styear, stmonth, stday, endyear, endmonth, endday, version\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(ccode)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 204\nColumns: 5\n$ idea_country_name <chr> \"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Ang…\n$ idea_code         <chr> \"AFG\", \"ALB\", \"ALG\", \"AND\", \"ANG\", \"ANT\", \"ARG\", \"AR…\n$ ccode             <dbl> 700, 339, 615, 232, 540, NA, 160, 371, 900, 305, 373…\n$ cc_country_name   <chr> \"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Ang…\n$ cow_country_name  <chr> \"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Ang…\n```\n:::\n:::\n\n\n## Check the Unambiguous Matches\n\n\n::: {.cell}\n\n:::\n\n\nAll three `*_country_name` variables match exactly for 164 countries. We consider these `ccode` values for these countries correct.\n\nThe countries shown below are those that {countrycode} matched unambiguously, but whose names did NOT exactly match across the three sources.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\ncc_joined |> \n  filter(!is.na(ccode)) |>\n  mutate(name_match = idea_country_name == cc_country_name &\n           idea_country_name == cow_country_name) |>\n  filter(name_match == FALSE) |>\n  kableExtra::kable()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> idea_country_name </th>\n   <th style=\"text-align:left;\"> idea_code </th>\n   <th style=\"text-align:right;\"> ccode </th>\n   <th style=\"text-align:left;\"> cc_country_name </th>\n   <th style=\"text-align:left;\"> cow_country_name </th>\n   <th style=\"text-align:left;\"> name_match </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> Bosnia and Herzegovina </td>\n   <td style=\"text-align:left;\"> BOS </td>\n   <td style=\"text-align:right;\"> 346 </td>\n   <td style=\"text-align:left;\"> Bosnia &amp; Herzegovina </td>\n   <td style=\"text-align:left;\"> Bosnia and Herzegovina </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Republic of the Congo </td>\n   <td style=\"text-align:left;\"> CON </td>\n   <td style=\"text-align:right;\"> 484 </td>\n   <td style=\"text-align:left;\"> Congo - Brazzaville </td>\n   <td style=\"text-align:left;\"> Congo </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Former Czechoslovakia </td>\n   <td style=\"text-align:left;\"> CZE </td>\n   <td style=\"text-align:right;\"> 315 </td>\n   <td style=\"text-align:left;\"> Czechoslovakia </td>\n   <td style=\"text-align:left;\"> Czechoslovakia </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Czech Republic </td>\n   <td style=\"text-align:left;\"> CZR </td>\n   <td style=\"text-align:right;\"> 316 </td>\n   <td style=\"text-align:left;\"> Czechia </td>\n   <td style=\"text-align:left;\"> Czech Republic </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Guinea Bissau </td>\n   <td style=\"text-align:left;\"> GNB </td>\n   <td style=\"text-align:right;\"> 404 </td>\n   <td style=\"text-align:left;\"> Guinea-Bissau </td>\n   <td style=\"text-align:left;\"> Guinea-Bissau </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Macedonia </td>\n   <td style=\"text-align:left;\"> MAC </td>\n   <td style=\"text-align:right;\"> 343 </td>\n   <td style=\"text-align:left;\"> North Macedonia </td>\n   <td style=\"text-align:left;\"> Macedonia </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Burma </td>\n   <td style=\"text-align:left;\"> MYA </td>\n   <td style=\"text-align:right;\"> 775 </td>\n   <td style=\"text-align:left;\"> Myanmar (Burma) </td>\n   <td style=\"text-align:left;\"> Myanmar </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Palestine </td>\n   <td style=\"text-align:left;\"> PAL </td>\n   <td style=\"text-align:right;\"> 986 </td>\n   <td style=\"text-align:left;\"> Palau </td>\n   <td style=\"text-align:left;\"> Palau </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Swaziland </td>\n   <td style=\"text-align:left;\"> SWA </td>\n   <td style=\"text-align:right;\"> 572 </td>\n   <td style=\"text-align:left;\"> Eswatini </td>\n   <td style=\"text-align:left;\"> Swaziland </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Trinidad and Tobago </td>\n   <td style=\"text-align:left;\"> TRI </td>\n   <td style=\"text-align:right;\"> 52 </td>\n   <td style=\"text-align:left;\"> Trinidad &amp; Tobago </td>\n   <td style=\"text-align:left;\"> Trinidad and Tobago </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> United States </td>\n   <td style=\"text-align:left;\"> USA </td>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;\"> United States </td>\n   <td style=\"text-align:left;\"> United States of America </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> Former Yugoslavia </td>\n   <td style=\"text-align:left;\"> YUG </td>\n   <td style=\"text-align:right;\"> 345 </td>\n   <td style=\"text-align:left;\"> Yugoslavia </td>\n   <td style=\"text-align:left;\"> Yugoslavia </td>\n   <td style=\"text-align:left;\"> FALSE </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nWith the exception of the code PAL, these are all correct matches, but the three data sets use slightly different spellings for the three countries. Because Palestine is not in the COW systems data, it is not included in our country-year data set.\n\n## Resolve the Ambiguous Matches\n\n`countrycode()` failed to unambigously match 28 countries, shown below\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncc_joined |>\n  filter(is.na(ccode)) |> \n  select(starts_with(\"idea\")) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 28 × 2\n   idea_country_name     idea_code\n   <chr>                 <chr>    \n 1 Antigua and Barbuda   ANT      \n 2 Cook Islands          COO      \n 3 Turkish Cyprus        CYT      \n 4 Dominica              DMI      \n 5 Fiji                  FJI      \n 6 Micronesia            FMS      \n 7 Germany               FRG      \n 8 East and West Germany GDR/FRG  \n 9 Cote d Ivoire         IVO      \n10 Monaco                MCO      \n# ℹ 18 more rows\n```\n:::\n:::\n\n\nFor each of these cases, we made a judgment about what COW code to use. In the tribble below, we manually assign COW codes to the IDEA codes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncow_manual <- tibble::tribble(\n  ~idea_country_name,                ~idea_code, ~ccode,\n  \"Antigua and Barbuda\",            \"ANT\", 58,\n  \"Cook Islands\",                   \"COO\", NA,\n  \"Cote d Ivoire\",                 \"IVO\", 437,\n  \"Democratic Republic of the Congo\",\"ZAI\", 490,\n  \"Dominica\",                       \"DMI\", 54,\n  \"East Germany\",                   \"GDR\", 265,\n  \"West Germany\",                   \"FRGpre\", 260,   # <- manually edited the IDEA codes to distinguish ccodes 255 and 260\n  \"Fiji\",                           \"FJI\", 950,\n  \"Germany\",                        \"FRG\", 255,\n  \"Micronesia\",                     \"FMS\", 987,\n  \"Monaco\",                         \"MCO\", 221,\n  \"Niue\",                           \"NIU\", NA,\n  \"North Korea\",                    \"PRK\", 731,\n  \"South Korea\",                    \"ROK\", 732,\n  \"South Yemen\",          \"YPR\", 680,\n  \"North Yemen\",          \"YAR\", 678,\n  \"Palau\",                          \"PAU\", 986,\n  \"Paracel Islands\",                \"PAC\", NA,\n  \"Puerto Rico\",                    \"PTR\", NA,\n  \"Romania\",                        \"RUM\", 360,\n  \"Saint Kitts and Nevis\",          \"STK\", 60,\n  \"Saint Lucia\",                    \"STL\", 56,\n  \"Saint Vincent and the Grenadines\",\"STV\", 57,\n  \"San Marino\",                     \"SMO\", 331,\n  \"Sao Tome and Principe\",          \"SAO\", 403,\n  \"Serbia and Montenegro\",          \"SER\", NA,\n  \"Spratly Islands\",                \"SPL\", NA,\n  \"Turkish Cyprus\",                 \"CYT\", NA,\n  \"United Kingdom\",                 \"UK_\", 200,\n  \"Vatican\",                        \"VAT\", 327,\n  \"Western Sahara\",                 \"WSA\", NA,\n)\n```\n:::\n\n\nNote that the IDEA code uses FRG for both pre-1990 West Germany and post-1990 Germany. The COW code uses codes 260 and 255 to distinguish these countries. The IDEA data uses FRG for both, so we collapse COW code 260 into 255 in our data set. This affects the year 1990 only.\n\n## Creating the Empty Country-Year Data Set\n\nUsing the `cc_joined` and `cow_manual` data sets, we create a data set that links the IDEA codes to COW codes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_country_years <- read_csv(\"data/system2016.csv\") |>\n  select(year, ccode) |>\n  filter(year >= 1990 & year <= 2004) |>\n  left_join(select(cc_joined, ccode, idea_code)) |>\n  left_join(select(cow_manual, ccode, idea_code2 = idea_code)) |>\n  mutate(idea_code = ifelse(is.na(idea_code), idea_code2, idea_code)) |>\n  select(-idea_code2) |>\n  glimpse() \n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 15951 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): stateabb\ndbl (3): ccode, year, version\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nJoining with `by = join_by(ccode)`\nJoining with `by = join_by(ccode)`\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 2,792\nColumns: 3\n$ year      <dbl> 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, 1990, …\n$ ccode     <dbl> 2, 20, 31, 40, 41, 42, 51, 52, 53, 54, 55, 56, 57, 58, 60, 7…\n$ idea_code <chr> \"USA\", \"CAN\", \"BHM\", \"CUB\", \"HAI\", \"DOM\", \"JAM\", \"TRI\", \"BAR…\n```\n:::\n:::\n\n\n## What COW countries don't exist in the IDEA data?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_country_years |>\n  filter(is.na(idea_code)) |>\n  select(ccode) |>\n  distinct()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 1\n  ccode\n  <dbl>\n1   983\n2   860\n```\n:::\n:::\n\n\nIDEA codes merge into all the COW countries except for 983 (Marshall Islands) and 860 (East Timor). As best we can tell, these countries are absent from the IDEA data.\n\nNow we write the empty country-year data set to file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempty_country_years %>%\n  filter(!(ccode %in% c(983, 860))) %>%\n  write_csv(\"output/empty-country-years.csv\") \n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}